# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core
trigger:
- develop
- feature/*
pool:
  vmImage: ubuntu-latest
variables:
  buildConfiguration: 'Release'
  buildPlatform: 'Any CPU'
  artifaceName: ArtifactOutput
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs:
  - job: 'BuildClient'
    displayName: 'Build job'
    steps:
<<<<<<< HEAD:old.yml
      - task: Docker@2
        inputs:
          containerRegistry: 'ACRDocker'
          repository: '$(repository)'
          command: 'buildAndPush'
          Dockerfile: '**/Dockerfile'
          tags: |
            latest
            $(Build.BuildNumber)
      - task: PublishPipelineArtifact@1
        inputs:
          artifactName: 'manifests'
          path: 'manifests'
=======
    - task: Npm@1
      displayName: 'Restore Angular Dependencies'
      inputs:
        command: install
        workingDir: 'ClientApp'
        verbose: false
    - task: Npm@1
      displayName: 'Build Angular'
      inputs:
        command: install
        workingDir: 'ClientApp'
        verbose: false
        customCommand: 'run build --prod'
    - task: Npm@1
      displayName: 'Test UI'
      inputs:
        command: install
        workingDir: 'ClientApp'
        verbose: false
        customCommand: 'run test --watch=false'
  # Middle Layer
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: 'dotnet6.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: 'dotnet6.csproj'
    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: 'dotnet6.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: $(artifaceName)
      

- stage: 'DeployDev'
  displayName: 
  # condition: and(succeeded(), eq(variables).isMain,'true')
  variables:
    appName: 'NarmadaDev'
>>>>>>> 5f172a7651f9c04499d1afb0e84506dbe614d267:azure-pipelines.yml

  jobs:
  - deployment: 'Dev'
    environment: 'Dev'

    strategy: 
      runOnce:
        deploy:
          steps:
          - task: AzureRmWebAppDeployment@4
            inputs:
             ConnectionType: 'AzureRM'
             azureSubscription: 'Azure subscription 1(ba90dea8-7d6b-4ddc-88a8-4bf24d30d498)'
             appType: 'webAppLinux'
             WebAppName: $(appName)
             packageForLinux: '$(pipeline.workspace)/$(artifaceName)/$(buildConfiguration)/*.zip'
- stage: 'DeployTest'
  displayName: 
  # condition: and(succeeded(), eq(variables).isMain,'true')
  variables:
    appName: 'NarmadaTest'

<<<<<<< HEAD:old.yml
           - task: KubernetesManifest@0
             displayName: Create imagePullSecret
             inputs:
                kubernetesServiceConnection: $(k8sconnection)
                action: createSecret
                secretName: $(imagePullSecret)
                namespace: $(namespace)
                dockerRegistryEndpoint: 'ACRDocker'
              
           - task: KubernetesManifest@0
             displayName: Deploy
             inputs:
              kubernetesServiceConnection: $(k8sconnection)
              action: deploy
              namespace: $(namespace)
              manifests: |
                $(System.ArtifactsDirectory)/manifests/deployment.yaml
                $(System.ArtifactsDirectory)/manifests/Service.yaml
                $(System.ArtifactsDirectory)/manifests/Ingress.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              arguments: '-n=walmartdev'
=======
  jobs:
  - deployment: 'Test'
    environment: 'Test'

    strategy: 
      runOnce:
        deploy:
          steps:
          
          - task: AzureRmWebAppDeployment@4
            inputs:
             ConnectionType: 'AzureRM'
             azureSubscription: 'Azure subscription 1(ba90dea8-7d6b-4ddc-88a8-4bf24d30d498)'
             appType: 'webAppLinux'
             WebAppName: $(appName)
             packageForLinux: '$(pipeline.workspace)/$(artifaceName)/$(buildConfiguration)/*.zip'
- stage: 'DeployProd'
  displayName: 
  # condition: and(succeeded(), eq(variables).isMain,'true')
  variables:
    appName: 'NarmadaProd'
  jobs:
  - deployment: 'Prod'
    environment: 'Prod'
    strategy: 
      runOnce:
        deploy:
          steps:
          
          - task: AzureRmWebAppDeployment@4
            inputs:
             ConnectionType: 'AzureRM'
             azureSubscription: 'Azure subscription 1(ba90dea8-7d6b-4ddc-88a8-4bf24d30d498)'
             appType: 'webAppLinux'
             WebAppName: $(appName)
             packageForLinux: '$(pipeline.workspace)/$(artifaceName)/$(buildConfiguration)/*.zip'
>>>>>>> 5f172a7651f9c04499d1afb0e84506dbe614d267:azure-pipelines.yml
